package personaje;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import item.Capa;
import item.Escudo;
import item.Punial;
/**
 * @author adrian
 *
 */
public class CaballeroTest {
	private final double ATAQUE = 50;
	private final double SALUD = 200;
	private final double ENERGIA = 3;
	private final double DEFENSA = 0;
	private final double ENERGIA_CONSUMIDA = 1;
	private final int POS1=0;
	private final int POS2=1;

	private Unidad unidad;
	

	@Test
	public void crearNuevoTest(){
		unidad = new Caballero(1);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA)  == 0 &&
					Double.compare(unidad.getDefensa(10) , DEFENSA)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}
	
	@Test
	public void equiparEscudoTest(){
		unidad = new Caballero(1);
		unidad = new Escudo(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA)  == 0 &&
					Double.compare(unidad.getDefensa(10) , DEFENSA + 10 * 0.4)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparPunialTest(){
		unidad = new Caballero(1);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE + 3)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	

	@Test
	public void equiparCapaTest(){
		unidad = new Caballero(1);
		unidad = new Capa(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(), ATAQUE - ATAQUE*0.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , 0)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparEscudoCapaTest(){
		unidad = new Caballero(1);
		unidad = new Escudo(unidad);
		unidad = new Capa(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE - ATAQUE * 0.1 )   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) ,10 * 0.4)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparCapaEscudoTest(){
		unidad = new Caballero(1);
		unidad = new Capa(unidad);
		unidad = new Escudo(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE - ATAQUE * .1 )   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) ,10 * .4)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparEscudoPunialTest(){
		unidad = new Caballero(1);
		unidad = new Escudo(unidad);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),   ATAQUE + 3 )   == 0 && 
					Double.compare(unidad.getEnergia(),  ENERGIA)  == 0 &&
					Double.compare(unidad.getDefensa(10) , 10*.4 - 3 )   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	

	@Test
	public void equiparPunialEscudoTest(){
		unidad = new Caballero(1);
		unidad = new Punial(unidad);
		unidad = new Escudo(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),   ATAQUE + 3 )   == 0 && 
					Double.compare(unidad.getEnergia(),  ENERGIA)  == 0 &&
					Double.compare(unidad.getDefensa(10) , 10* .4 - 3 )   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
		
	@Test
	public void equiparPunialCapaTest(){
		unidad = new Caballero(1);
		unidad = new Punial(unidad);
		unidad = new Capa(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE +3 - ATAQUE*0.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparCapaPunialTest(){
		unidad = new Caballero(1);
		unidad = new Capa(unidad);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE +3 - ATAQUE*0.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3)   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
		
	@Test
	public void equiparEscudoCapaPunialTest(){
		unidad = new Caballero(1);
		unidad = new Escudo(unidad);
		unidad = new Capa(unidad);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE + 3 - ATAQUE*0.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3 + 10*0.4 )   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparCapaEscudoPunialTest(){
		unidad = new Caballero(1);
		unidad = new Capa(unidad);
		unidad = new Escudo(unidad);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE + 3 - ATAQUE*0.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3 + 10*0.4 )   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparCapaPunialEscudoTest(){
		unidad = new Caballero(1);
		unidad = new Capa(unidad);
		unidad = new Escudo(unidad);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE + 3 - ATAQUE*0.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3 + 10*.4 )   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void equiparPunialCapaEscudoTest(){
		unidad = new Caballero(1);
		unidad = new Capa(unidad);
		unidad = new Escudo(unidad);
		unidad = new Punial(unidad);
		assertTrue(
					Double.compare(unidad.getPosicion(), 1)   == 0 &&
					Double.compare(unidad.getAtaque(),  ATAQUE + 3 - ATAQUE*.1)   == 0 && 
					Double.compare(unidad.getEnergia(), ENERGIA * 2)  == 0 &&
					Double.compare(unidad.getDefensa(10) , -3 + 10*.4 )   == 0 && 
					Double.compare(unidad.getSalud(),    SALUD) == 0
				  );
	}	
	
	@Test
	public void distanciaNoValidaParaCombate(){
		Unidad u1 = new Caballero(0);
		Unidad u2 = new Soldado(3);
		assertFalse(u1.puedoAtacar(u2));
		u1 = new Caballero(0);
		u2 = new Arquero(0);
		assertFalse(u1.puedoAtacar(u2));
	}
	
	@Test
	public void distanciaValidaParaCombate(){
		Unidad u1 = new Caballero(5);
		Unidad u2 = new Soldado(6);

		for(int i=0 ; i<2; i++){
			assertTrue(u1.puedoAtacar(u2));
			u2.avanzar();
		}
	}
	
	@Test
	public void puedeRestaurarEnergia(){
		unidad = new Caballero(1);
		unidad.atacar(new Soldado(2));
		assertTrue(unidad.puedeRestauraEnergia());
	}

	@Test
	public void agotarEnergia(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(2);
		for(double i = ENERGIA ; i>0 ; i-= 1){
			unidad.atacar(victima);
			if(!victima.conVida())
				victima = new Soldado(3);
		}
		assertEquals(unidad.getEnergia(), 0, 0.1);
	}
	
	@Test
	public void restaurarEnergia(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(2);
		for(double i = ENERGIA ; i>0 ; i-= 1){
			unidad.atacar(victima);
		}
		unidad.restaurarEnergia();
		assertEquals(unidad.getEnergia(), ENERGIA, 0.1);
		
	}
	
	
	@Test
	public void noPoderAtacarMuertos(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(3);
		while(victima.conVida()){
			unidad.atacar(victima);
			unidad.restaurarEnergia();
		}
		assertFalse(unidad.puedoAtacar(victima));
	
	}
	
	@Test
	public void noAtacarMuertos(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(3);
		while(victima.conVida()){
			unidad.atacar(victima);
			unidad.restaurarEnergia();
		}
		assertEquals(unidad.atacar(victima), 0, 0.1);
	
	}

	@Test
	public void noSeAutoAtaca(){

		unidad = new Caballero(1);
		assertFalse(unidad.puedoAtacar(unidad));
	}

	@Test
	public void noPoderAtacarEstandoMuerto(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(3);
		while(victima.conVida()){
			unidad.atacar(victima);
			unidad.restaurarEnergia();
		}
		assertFalse(victima.puedoAtacar(unidad));
	}

	@Test
	public void noAtacarEstandoMuerto(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(3);
		while(victima.conVida()){
			unidad.atacar(victima);
			unidad.restaurarEnergia();
		}
		assertEquals(victima.atacar(unidad), 0, 0.1);
	
		
	}
	
	@Test
	public void noPoderAtacarAgotado(){
		unidad = new Caballero(1);
		Unidad victima = new Soldado(3);
		for(double i = ENERGIA ; i>0 ; i-= 1){
			unidad.atacar(victima);
			if(!victima.conVida())
				victima = new Soldado(3);
		}
		System.out.println(unidad.getEnergia());
		assertFalse(unidad.puedoAtacar(new Soldado(200)));
	}	
	
	@Test
	public void noAtacarAgotado(){
		unidad = new Caballero(1);
		Unidad victima = new Caballero(3);
		for(double i = ENERGIA ; i>0 ; i-= 1){
			unidad.atacar(victima);
			if(!victima.conVida())
				victima = new Soldado(3);
		}
		assertEquals(unidad.atacar(new Soldado(200)), 0, 0.1);
		
	}


	/////////////LUCHO MIRAR DESDE ACA PARA ABAJO PARA BASARTE PARA LOS OTROS TEST
	@Test
	public void baseAtacadoPorCaballeroBase(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - ATAQUE);
	}
	@Test
	public void baseAtacadoPorCaballeroConEscudo(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante = new Escudo(atacante);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - ATAQUE);
	}
	@Test
	public void baseAtacadoPorCaballeroConPunial(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante = new Punial(atacante);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - (ATAQUE +3));
	}
	@Test
	public void baseAtacadoPorCaballeroConCapa(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante = new Capa(atacante);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - (ATAQUE - ATAQUE*.1));
	}
	@Test
	public void baseAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante = new Escudo(atacante);
		atacante = new Punial(atacante);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - (ATAQUE + 3));
	}
	@Test
	public void baseAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante = new Escudo(atacante);
		atacante = new Capa(atacante);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - (ATAQUE - ATAQUE*.1));
	}
	@Test
	public void baseAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Caballero(POS1);
		Unidad atacante = new Caballero(POS2);
		atacante = new Capa(atacante);
		atacante = new Punial(atacante);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == SALUD - (ATAQUE - ATAQUE*0.1 + 3));
	}
	
	//////
	@Test
	public void conEscudoAtacadoPorCaballeroBase(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante = new Caballero(POS2);
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - (ATAQUE-ATAQUE*0.4)));
	}
	
	@Test
	public void conEscudoAtacadoPorCaballeroConEscudo(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante =  new Escudo(new Caballero(POS2));
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - (ATAQUE-ATAQUE*0.4)));
	}
	
	@Test
	public void conEscudoAtacadoPorCaballeroConPunial(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante =  new Punial(new Caballero(POS2));
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - ((ATAQUE+3)-(ATAQUE+3)*.4)));
	}
	
	@Test
	public void conEscudoAtacadoPorCaballeroConCapa(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante =  new Capa(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.1; 
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
	@Test
	public void conEscudoAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante =  new Escudo(new Punial(new Caballero(POS2)));
		atacante.atacar(unidad);
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - ((ATAQUE+3)-(ATAQUE+3)*.4)));
	}
	
	@Test
	public void conEscudoAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante =  new Escudo(new Capa(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.1; 
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
	@Test
	public void conEscudoAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Escudo(new Caballero(POS1));
		Unidad atacante =  new Capa(new Punial(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.1; 
		valorAtaque+=3;
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	

	//////
	@Test
	public void conPunialAtacadoPorCaballeroBase(){
		unidad = new Punial(new Caballero(POS1));
		Unidad atacante =  new Caballero(POS2);
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialAtacadoPorCaballeroConEscudo(){
		unidad = new Punial(new Caballero(POS1));
		Unidad atacante =  new Escudo(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialAtacadoPorCaballeroConPunial(){
		unidad = new Punial(new Caballero(POS1));
		Unidad atacante =  new Punial(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE + 3 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialAtacadoPorCaballeroConCapa(){
		unidad = new Punial(new Caballero(POS1));
		Unidad atacante =  new Capa(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * 0.1;
		valorAtaque += 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Punial(new Caballero(POS1));
		Unidad atacante =  new Escudo( new Punial(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE+3+3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Punial(new Caballero(POS1));
		Unidad atacante =  new Capa( new Escudo(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * 0.1;
		valorAtaque += 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Punial(new Caballero(0));
		Unidad atacante =  new Capa( new Punial(new Caballero(0)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * 0.1;
		valorAtaque += 3+3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	

	//////
	@Test
	public void conCapaAtacadoPorCaballeroBase(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante =  new Caballero(POS2);
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE ;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaAtacadoPorCaballeroConEscudo(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante = new Escudo( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE ;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaAtacadoPorCaballeroConPunial(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante = new Punial( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaAtacadoPorCaballeroConCapa(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante = new Capa( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.1;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante = new Escudo(new Punial( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante = new Escudo(new Capa( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.1;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Capa(new Caballero(POS1));
		Unidad atacante = new Punial(new Capa( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.1 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
	
	//////
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroBase(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante = new Caballero(POS2);
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.4;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroConEscudo(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante = new Escudo(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*.4;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroConPunial(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante = new Punial(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroConCapa(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante = new Capa(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE *0.1;
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante = new Escudo( new Punial(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante =new Escudo( new Capa(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE *0.1;
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conCapaYEscudoAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Escudo(new Capa(new Caballero(POS1)));
		Unidad atacante = new Punial( new Capa(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE *0.1 + 3;
		valorAtaque = valorAtaque - valorAtaque*.4;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
//////
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroBase(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante = new Caballero(POS2);
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroConEscudo(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante = new Escudo(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroConPunial(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante =new Punial( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroConCapa(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante =new Capa( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * 0.1;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante =new Escudo(new Punial( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante =new Escudo(new Capa( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE -ATAQUE * 0.1;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYEscudoAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Escudo(new Punial(new Caballero(POS1)));
		Unidad atacante =new Punial(new Capa( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE -ATAQUE * 0.1 +3;
		valorAtaque = valorAtaque - valorAtaque*.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
	//////
	@Test
	public void conPunialYCapaAtacadoPorCaballeroBase(){
		unidad = new Capa(new Punial(new Caballero(POS1)));
		Unidad atacante =new Caballero(POS2);
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE;
		valorAtaque = valorAtaque + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYCapaAtacadoPorCaballeroConEscudo(){
		unidad = new Capa(new Punial(new Caballero(POS1)));
		Unidad atacante = new Escudo(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE;
		valorAtaque = valorAtaque + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYCapaAtacadoPorCaballeroConPunial(){
		unidad = new Capa(new Punial(new Caballero(POS1)));
		Unidad atacante = new Punial(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE+3;
		valorAtaque = valorAtaque  + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYCapaAtacadoPorCaballeroConCapa(){
		unidad = new Capa(new Punial(new Caballero(POS1)));
		Unidad atacante = new Capa(new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE *0.1;
		valorAtaque = valorAtaque + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYCapaAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Capa(new Punial(new Caballero(POS1)));
		Unidad atacante = new Escudo(new Punial(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE +3;
		valorAtaque = valorAtaque + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYCapaAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Capa(new Punial(new Caballero(POS1)));
		Unidad atacante = new Escudo(new Capa(new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE *0.1;
		valorAtaque = valorAtaque + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialYCapaAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Capa(new Punial(new Caballero(POS2)));
		Unidad atacante = new Punial(new Capa(new Caballero(POS1)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE *0.1 + 3;
		valorAtaque = valorAtaque + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
	
	//////
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroBase(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Caballero(POS2);
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConEscudo(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Escudo( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConPunial(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Punial( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE + 3;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConCapa(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Capa( new Caballero(POS2));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE*0.1;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConEscudoYPunial(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Escudo(new Punial( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE + 3;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConEscudoYCapa(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Escudo(new Capa( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * .1;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConCapaYPunial(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Punial(new Capa( new Caballero(POS2)));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * .1 + 3;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	@Test
	public void conPunialCapaYEscudoAtacadoPorCaballeroConCapaPunialYEscudo(){
		unidad = new Capa(new Escudo(new Punial(new Caballero(POS1))));
		Unidad atacante = new Escudo(new Punial(new Capa( new Caballero(POS2))));
		atacante.atacar(unidad);
		double valorAtaque = ATAQUE - ATAQUE * .1 + 3;
		valorAtaque = valorAtaque - valorAtaque*0.4 + 3;
		assertTrue(atacante.getEnergia() == ENERGIA*2 - ENERGIA_CONSUMIDA && unidad.getSalud() == (SALUD - valorAtaque));
	}
	
	
}

	
	
